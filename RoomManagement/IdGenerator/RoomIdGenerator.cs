using System;
using System.Security.Cryptography;

namespace RoomManagement.IdGenerator {

    internal enum IdType {

        SERVER_ID,
        ROOM_ID

    }

    public class RoomIdGenerator {

        private const string VALID_CHARS_SERVER_ID = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        private const string VALID_CHARS_ROOM_ID = "1234567890";
        internal static string GenerateId(IdType type) {

            string id = "";

            using RNGCryptoServiceProvider provider = new();

            int length = type switch {
            IdType.ROOM_ID => 4,
            IdType.SERVER_ID => 24,
            _ => throw new ArgumentOutOfRangeException(nameof(type), "Invalid ID Type")
            };

            while (id.Length < length) {
                    
                // Stores random byte generated by the engine
                byte[] oneByte = new byte[1];
                    
                // Gets random byte from the engine and stores it in the byte array
                provider.GetBytes(oneByte);
                    
                // Converts the byte to a character
                char character = (char) oneByte[0];

                if (type == IdType.ROOM_ID) {
                    
                    if (VALID_CHARS_ROOM_ID.Contains(character)) {
                        id += character;
                    }
                    
                }
                
                else {
                    
                    if (VALID_CHARS_SERVER_ID.Contains(character)) {
                        id += character;
                    }
                    
                }
            }

            return id;

        }

    }

}